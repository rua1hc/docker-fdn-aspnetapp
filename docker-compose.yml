version: "3.9"

services:
    rabbitmq:
        image: ${DOCKER_REGISTRY-}rabbitmq
        # image: masstransit/rabbitmq
        build:
            context: .
            dockerfile: rabbitmq/Dockerfile
        ports:
            - 5672:5672
            - 15672:15672
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:15672"]
            interval: 30s
            timeout: 10s
            retries: 5
    course-api:
        image: ${DOCKER_REGISTRY-}course-api
        build:
            context: .
            dockerfile: Course-service/Dockerfile
        environment:
            - ConnectionStrings__DefaultConnection=Server=mssql;database=net_Course;User Id=sa;Password=Admin123!
        ports:
            - 7237:80
            - 5237:443
        depends_on:
            rabbitmq:
                condition: service_healthy
            mssql:
                condition: service_started
    user-api:
        image: ${DOCKER_REGISTRY-}user-api
        build:
            context: .
            dockerfile: aspnetapp\Dockerfile
        environment:
            - ConnectionStrings__DefaultConnection=Server=mssql;database=net_User;User Id=sa;Password=Admin123!
        ports:
            - 7131:80
            - 5011:443
        depends_on:
            - course-api
    notification:
        image: ${DOCKER_REGISTRY-}notification
        build:
            context: .
            dockerfile: NotificationService/Dockerfile
        ports:
            - 7094:80
            - 5094:443
        depends_on:
            - course-api
    report:
        image: ${DOCKER_REGISTRY-}report
        build:
            context: .
            dockerfile: ReportService/Dockerfile
        environment:
            - ConnectionStrings__DefaultConnection=Server=mssql;database=net_Report;User Id=sa;Password=Admin123!
        ports:
            - 7124:80
            - 5124:443
        depends_on:
            - course-api
    mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        environment:
            - ACCEPT_EULA=Y
            - MSSQL_SA_PASSWORD=Admin123!
            # ACCEPT_EULA: "Y"
            # MSSQL_SA_PASSWORD: "Admin123!"
        ports:
            - 1433:1433
        volumes:
            # - ./mssql:/scripts/
            - ./manInitDb4Docker.sql:/scripts/manInitDb4Docker.sql
        command:
            - /bin/bash
            - -c
            - |
                /opt/mssql/bin/sqlservr &
                pid=$$!
                echo "Waiting for MS SQL to be available.."
                /opt/mssql-tools/bin/sqlcmd -l 30 -S localhost -h-1 -V1 -U sa -P $$MSSQL_SA_PASSWORD -Q "SET NOCOUNT ON SELECT \"YAY WE ARE UP\" , @@servername"
                is_up=$$?
                while [ $$is_up -ne 0 ] ; do
                    echo -e $$(date)
                    /opt/mssql-tools/bin/sqlcmd -l 30 -S localhost -h-1 -V1 -U sa -P $$MSSQL_SA_PASSWORD -Q "SET NOCOUNT ON SELECT \"YAY WE ARE UP\" , @@servername"
                    is_up=$$?
                    sleep 5
                done
                # TODO set a flag so that this is only done once on creation, not every time the container runs
                for foo in /scripts/*.sql
                    do /opt/mssql-tools/bin/sqlcmd -U sa -P $$MSSQL_SA_PASSWORD -l 30 -e -i $$foo
                done
                # trap SIGTERM and send same to sqlservr process for clean shutdown
                trap "kill -15 $$pid" SIGTERM
                # Wait on the sqlserver process
                wait $$pid
                exit 0
    # app:
    #     build:
    #         context: .
    #         dockerfile: aspnetapp/Dockerfile
    #     environment:
    #         ASPNETCORE_ENVIRONMENT: Development
    #         SEQ_SERVER_URL: "http://seq:5341"
    #         # - SEQ_ADDRESS=http://seq:5341
    #     ports:
    #         - 7131:80
    #         - 5011:443
    #     # depends_on:
    #     #     - mysql
    #     #     - seq
    # stub:
    #     build:
    #         context: .
    #         dockerfile: ServiceStub/Dockerfile
    #     environment:
    #         ASPNETCORE_ENVIRONMENT: Development
    #         SEQ_SERVER_URL: "http://seq:5341"
    #         # - SEQ_ADDRESS=http://seq:5341
    #     ports:
    #         - 12345:80
    #     # depends_on:
    #     #     - seq
    # mysql:
    #     image: mysql:5.7
    #     environment:
    #         MYSQL_DATABASE: DotNetTraining
    #         MYSQL_ROOT_PASSWORD: 240690
    #     volumes:
    #         - ./dbSetup.sql:/docker-entrypoint-initdb.d/dbSetup.sql
    #         - vmysql:/var/lib/mysql
    # seq:
    #     image: datalust/seq
    #     restart: unless-stopped
    #     environment:
    #         - ACCEPT_EULA=Y
    #     ports:
    #         - 8080:80
    #         - 5342:5341

# volumes:
#     vmysql:
